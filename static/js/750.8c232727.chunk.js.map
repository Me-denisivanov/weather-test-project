{"version":3,"file":"static/js/750.8c232727.chunk.js","mappings":"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","sources":["store/slices/forecastSlice/selectors/forecastSelectors.ts","../node_modules/@mui/material/esm/CardMedia/cardMediaClasses.js","../node_modules/@mui/material/esm/CardMedia/CardMedia.js","components/ForecastCard/ForecastCard.tsx","components/Forecast/Forecast.tsx","pages/DetailsPage/ui/DetailsPage.tsx","shared/hooks/useAppSelector.ts","store/slices/weatherSlice/selectors/weatherSelectors.ts"],"sourcesContent":["import { RootState } from '../../../index';\n\nexport const getForecastData = (state: RootState) => state.forecast?.data;\nexport const getForecastIsLoading = (state: RootState) => state.forecast?.isLoading || false;\nexport const getForecastIsError = (state: RootState) => state.forecast?.error || false;\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardMediaUtilityClass(slot) {\n  return generateUtilityClass('MuiCardMedia', slot);\n}\nconst cardMediaClasses = generateUtilityClasses('MuiCardMedia', ['root', 'media', 'img']);\nexport default cardMediaClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"image\", \"src\", \"style\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getCardMediaUtilityClass } from './cardMediaClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    isMediaComponent,\n    isImageComponent\n  } = ownerState;\n  const slots = {\n    root: ['root', isMediaComponent && 'media', isImageComponent && 'img']\n  };\n  return composeClasses(slots, getCardMediaUtilityClass, classes);\n};\nconst CardMediaRoot = styled('div', {\n  name: 'MuiCardMedia',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      isMediaComponent,\n      isImageComponent\n    } = ownerState;\n    return [styles.root, isMediaComponent && styles.media, isImageComponent && styles.img];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'block',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  backgroundPosition: 'center'\n}, ownerState.isMediaComponent && {\n  width: '100%'\n}, ownerState.isImageComponent && {\n  // ⚠️ object-fit is not supported by IE11.\n  objectFit: 'cover'\n}));\nconst MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];\nconst IMAGE_COMPONENTS = ['picture', 'img'];\nconst CardMedia = /*#__PURE__*/React.forwardRef(function CardMedia(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardMedia'\n  });\n  const {\n      children,\n      className,\n      component = 'div',\n      image,\n      src,\n      style\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const isMediaComponent = MEDIA_COMPONENTS.indexOf(component) !== -1;\n  const composedStyle = !isMediaComponent && image ? _extends({\n    backgroundImage: `url(\"${image}\")`\n  }, style) : style;\n  const ownerState = _extends({}, props, {\n    component,\n    isMediaComponent,\n    isImageComponent: IMAGE_COMPONENTS.indexOf(component) !== -1\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardMediaRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    role: !isMediaComponent && image ? 'img' : undefined,\n    ref: ref,\n    style: composedStyle,\n    ownerState: ownerState,\n    src: isMediaComponent ? image || src : undefined\n  }, other, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardMedia.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: chainPropTypes(PropTypes.node, props => {\n    if (!props.children && !props.image && !props.src && !props.component) {\n      return new Error('MUI: Either `children`, `image`, `src` or `component` prop must be specified.');\n    }\n    return null;\n  }),\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Image to be displayed as a background image.\n   * Either `image` or `src` prop must be specified.\n   * Note that caller must specify height otherwise the image will not be visible.\n   */\n  image: PropTypes.string,\n  /**\n   * An alias for `image` property.\n   * Available only with media components.\n   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.\n   */\n  src: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardMedia;","import {\n    Card,\n    CardContent,\n    CardMedia,\n    Grid,\n    Typography,\n} from '@mui/material';\nimport { memo } from 'react';\nimport { ForecastData } from '../../store/slices/forecastSlice/types/forecastTypes';\n\nexport const ForecastCard = memo((props: ForecastData) => {\n    const { date, temperature } = props;\n\n    return (\n        <Grid item xs={12} md={1.5} sx={{ mt: 3 }}>\n            <Card>\n                <Typography variant=\"h6\" sx={{ textAlign: 'center' }}>{date}</Typography>\n\n                <CardMedia\n                    component=\"img\"\n                    alt=\"green iguana\"\n                    height=\"100\"\n                    image=\"https://cdn-icons-png.flaticon.com/512/4804/4804221.png\"\n                />\n                <CardContent>\n                    <Typography sx={{ textAlign: 'center' }} variant=\"h6\">\n                        {temperature.currentTemp}\n                        °\n                    </Typography>\n                </CardContent>\n            </Card>\n\n        </Grid>\n\n    );\n});\n","import { memo } from 'react';\nimport { useAppSelector } from '../../shared/hooks/useAppSelector';\nimport { getForecastData, getForecastIsError } from '../../store/slices/forecastSlice/selectors/forecastSelectors';\nimport { ForecastCard } from '../ForecastCard/ForecastCard';\n\nexport const Forecast = memo(() => {\n    const forecastData = useAppSelector(getForecastData);\n    const forecastIsError = useAppSelector(getForecastIsError);\n\n    if (forecastIsError) {\n        return (\n            <h1>Error</h1>\n        );\n    }\n\n    return (\n        <>\n            {forecastData?.length && forecastData.map((item) => (\n                <ForecastCard key={item.date} {...item} />\n            ))}\n        </>\n    );\n});\n","import { memo, useEffect } from 'react';\nimport {\n    Card, CardContent, Grid, Typography,\n} from '@mui/material';\nimport { useParams } from 'react-router-dom';\nimport { Forecast } from '../../../components/Forecast/Forecast';\nimport { getCelsiusTemp } from '../../../shared/helpers/getCelsiusTemp/getCelsiusTemp';\nimport { getIndexCity } from '../../../shared/helpers/getIndexCity/getIndexCity';\nimport { getStorageWeather } from '../../../shared/helpers/getStorageWeather/getStorageWeather';\nimport { useAppDispatch } from '../../../shared/hooks/useAppDispatch';\nimport { useAppSelector } from '../../../shared/hooks/useAppSelector';\nimport { fetchForecastData } from '../../../store/asyncActions/fetchForecastData/fetchForecastData';\nimport { getWeatherData } from '../../../store/slices/weatherSlice/selectors/weatherSelectors';\nimport { weatherActions } from '../../../store/slices/weatherSlice/weatherSlice';\n\nconst DetailsPage = () => {\n    const dispatch = useAppDispatch();\n    const weatherData = useAppSelector(getWeatherData) || [];\n    const localStorageWeather = getStorageWeather();\n    const { id } = useParams();\n\n    const indexCity = getIndexCity(weatherData, id || '');\n    const getOneCity = weatherData[indexCity];\n\n    useEffect(() => {\n        if (id) {\n            dispatch(fetchForecastData(id));\n            dispatch(weatherActions.setStorageData());\n        }\n    }, [dispatch, id, localStorageWeather]);\n\n    return (\n        <>\n            <Grid item xs={12} md={3} sx={{ mt: 3 }}>\n                {getOneCity && (\n                    <Card>\n                        <CardContent>\n                            <Typography sx={{ textAlign: 'center', pb: '20px' }} variant=\"h4\">{getOneCity.name}</Typography>\n                            <Typography sx={{ textAlign: 'center', pb: '20px' }} variant=\"h5\">\n                                {getCelsiusTemp(getOneCity?.main?.temp)}\n                                ℃\n                            </Typography>\n                            <Typography sx={{ textAlign: 'center' }} variant=\"h5\">\n                                Country:\n                                {' '}\n                                {getOneCity?.sys?.country}\n                            </Typography>\n                            <Typography sx={{ textAlign: 'center' }} variant=\"h5\">\n                                Humidity:\n                                {' '}\n                                {getOneCity?.main?.humidity}\n                            </Typography>\n                            <Typography sx={{ textAlign: 'center' }} variant=\"h5\">\n                                On feeling:\n                                {' '}\n                                {getCelsiusTemp(getOneCity?.main?.feels_like)}\n                            </Typography>\n                            <Typography sx={{ textAlign: 'center' }} variant=\"h5\">\n                                Wind speed:\n                                {' '}\n                                {getOneCity?.wind?.speed}\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                )}\n            </Grid>\n            <Grid container spacing={2} justifyContent=\"space-between\">\n                <Forecast />\n            </Grid>\n        </>\n\n    );\n};\n\nexport default memo(DetailsPage);\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../../store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RootState } from '../../../index';\n\nexport const getWeatherData = (state: RootState) => state.weather?.data;\nexport const getWeatherIsLoading = (state: RootState) => state.weather?.isLoading || false;\nexport const getWeatherIsError = (state: RootState) => state.weather?.error || false;\n"],"names":["getForecastData","state","forecast","data","getForecastIsError","error","getCardMediaUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardMediaRoot","styled","name","overridesResolver","props","styles","ownerState","isMediaComponent","isImageComponent","root","media","img","_extends","display","backgroundSize","backgroundRepeat","backgroundPosition","width","objectFit","MEDIA_COMPONENTS","IMAGE_COMPONENTS","React","inProps","ref","useThemeProps","children","className","component","image","src","style","other","_objectWithoutPropertiesLoose","indexOf","composedStyle","backgroundImage","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","as","role","undefined","ForecastCard","memo","date","temperature","Grid","item","xs","md","sx","mt","Card","Typography","variant","textAlign","alt","height","CardContent","currentTemp","Forecast","forecastData","useAppSelector","length","map","DetailsPage","dispatch","useAppDispatch","weatherData","getWeatherData","localStorageWeather","getStorageWeather","id","useParams","getOneCity","getIndexCity","useEffect","fetchForecastData","weatherActions","pb","getCelsiusTemp","main","temp","sys","country","humidity","feels_like","wind","speed","container","spacing","justifyContent","useSelector","weather","getWeatherIsLoading","isLoading","getWeatherIsError"],"sourceRoot":""}